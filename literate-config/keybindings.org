* Packages
  + *keyfreq*
    #+begin_src emacs-lisp
	    (use-package keyfreq
	      :ensure t
	      :config
	      (keyfreq-mode 1)
	      (keyfreq-autosave-mode 1)
	      (setq keyfreq-exclude-commands '(self-insert-command org-cycle)))

	    (use-package key-chord
	      :ensure t
	      :config
	      (setq key-chord-two-keys-delay 0.1)
	      (key-chord-mode 1))

	    (use-package modalka
	      :ensure t
	      :config
	      (setq-default cursor-type '(bar . 3))
	      (setq modalka-cursor-type 'box)
	      (add-hook 'text-mode-hook #'modalka-mode)
	      (add-hook 'prog-mode-hook #'modalka-mode))

	    (use-package xah-fly-keys
	      :ensure t)

    #+end_src
* Functions
  #+begin_src emacs-lisp
    (defun insert-four-spaces ()
      (interactive)
      (insert "    "))
    (defun insert-one-spaces ()
      (interactive)
      (insert " "))

    (defun vj-change-enclosing ()
      (interactive)
      (sp-change-enclosing)
      (modalka-mode -1))

    (defun git-add-current-buffer ()
      "call 'git add [current-buffer]'"
      (interactive)
      (let* ((buffile (buffer-file-name))
	     (output (shell-command-to-string
		      (concat "git add " (buffer-file-name)))))
	(message (if (not (string= output ""))
		     output
		   (concat "Added " buffile)))))

  #+end_src
* Major mode specific
  #+begin_src emacs-lisp
    (defun mj-go-to-def ()
      (interactive)
      (cond

       ;; python-mode
       ((string-equal major-mode "python-mode")
	(anaconda-mode-find-definitions))

       );; end of cond
      );; end of defun
    (defun mj-run ()
      (interactive)
      (cond

       ;; latex
       ((string-equal major-mode "latex-mode")
	(save-buffer)
	(tex-compile))

       );; end of cond
      );; end of defun

    (define-key modalka-mode-map (kbd "SPC m d") 'mj-go-to-def)
    (define-key modalka-mode-map (kbd "SPC SPC") 'mj-run)
  #+end_src
* Enter and exit modal editing mode
  #+begin_src emacs-lisp
    (key-chord-define-global "99" 'modalka-mode)
    (define-key modalka-mode-map (kbd "G") 'god-execute-with-current-bindings)
    (define-key modalka-mode-map (kbd "9") 'modalka-mode)
    (global-set-key (kbd "<f8>") 'modalka-mode)
  #+end_src
* Movement keys
  #+begin_src emacs-lisp
    (define-key modalka-mode-map (kbd "i") 'previous-line)
    (define-key modalka-mode-map (kbd "I") 'beginning-of-buffer)
    (define-key modalka-mode-map (kbd "k") 'next-line)
    (define-key modalka-mode-map (kbd "K") 'end-of-buffer)
    (define-key modalka-mode-map (kbd "l") 'forward-char)
    (define-key modalka-mode-map (kbd "j") 'backward-char)
    (define-key modalka-mode-map (kbd "e") 'move-end-of-line)
    (define-key modalka-mode-map (kbd "s")'move-beginning-of-line)
    (define-key modalka-mode-map (kbd "o") 'forward-word)
    (define-key modalka-mode-map (kbd "u") 'backward-word)
    (define-key modalka-mode-map (kbd "w") 'other-window)
    (define-key modalka-mode-map (kbd "M-l") 'next-buffer)
    (define-key modalka-mode-map (kbd "M-j") 'previous-buffer)
    (define-key modalka-mode-map (kbd "#") 'goto-line)
    (define-key modalka-mode-map (kbd "SPC j") 'avy-goto-line)
  #+end_src
* Editing keys
  #+begin_src emacs-lisp
     (modalka-define-kbd "q" "M-q")
    (modalka-define-kbd "\\" "C-M-\\")
     (modalka-define-kbd "d" "DEL")
     (modalka-define-kbd "n" "RET")
     (define-key modalka-mode-map (kbd "SPC r") 'iedit-mode)
     (define-key modalka-mode-map (kbd "4") 'insert-four-spaces)
     (define-key modalka-mode-map (kbd "f") 'insert-one-spaces)
     (define-key modalka-mode-map (kbd "/") 'swiper)
     (define-key modalka-mode-map (kbd "SPC f") 'counsel-find-file)
     (define-key modalka-mode-map (kbd "p f") 'counsel-projectile-find-file)
     (define-key modalka-mode-map (kbd "SPC c") 'vj-change-enclosing)
     (modalka-define-kbd "v" "C-y") ;; paste
     (modalka-define-kbd "c" "M-w") ;; copy
     (modalka-define-kbd "x" "C-w") ;; cut
     (define-key modalka-mode-map (kbd "SPC v") 'counsel-yank-pop)
     (modalka-define-kbd "-" "C-_") ;; redo/undo
     (modalka-define-kbd "r" "M-%") ;; replace
  #+end_src
* commands
  #+begin_src emacs-lisp
    (define-key modalka-mode-map (kbd "SPC |") 'display-fill-column-indicator-mode)
    (define-key modalka-mode-map (kbd "b b") 'ace-jump-buffer)
    (define-key modalka-mode-map (kbd "SPC k") 'kill-buffer)
    (define-key modalka-mode-map (kbd "SPC s") 'save-buffer)
    (define-key modalka-mode-map (kbd "SPC S") 'save-some-buffers)
    (define-key modalka-mode-map (kbd "SPC x") 'counsel-M-x)
    (define-key modalka-mode-map (kbd ";") 'comment-line)
    (define-key modalka-mode-map (kbd "SPC a") 'org-agenda)
    (define-key modalka-mode-map (kbd "m") 'set-mark-command)
    (define-key modalka-mode-map (kbd "SPC h") 'highlight-symbol)
    (define-key modalka-mode-map (kbd "h") 'highlight-symbol-next)
    (define-key modalka-mode-map (kbd "H") 'highlight-symbol-prev)
    (define-key modalka-mode-map (kbd "0") 'delete-window)
    (define-key modalka-mode-map (kbd "1") 'delete-other-windows)
    (define-key modalka-mode-map (kbd "3") 'split-window-right)
    (define-key modalka-mode-map (kbd "SPC g a") 'git-add-current-buffer)
    (define-key modalka-mode-map (kbd "SPC g g") 'magit-status)
  #+end_src
* Project related
  #+begin_src emacs-lisp
    (define-key modalka-mode-map (kbd "SPC p s") 'projectile-switch-project)
  #+end_src
* Major mode rebindings usin use-package
  #+begin_src emacs-lisp
    ;; Treemacs
    (use-package treemacs
      :bind(:map treemacs-mode-map
		 ("w" . ace-window)
		 ("i" . treemacs-previous-line)
		 ("k" . treemacs-next-line)
		 ("n" . treemacs-RET-action)))
  #+end_src
