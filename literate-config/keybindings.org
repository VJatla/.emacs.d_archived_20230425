* Packages
  In additon to the packages installed here, the commands also depend
  on the following packages, smartparens, ...
  #+begin_src emacs-lisp
    ;; Ryo
    (use-package ryo-modal
      :ensure t
      :commands ryo-modal-mode
      )
    (setq ryo-modal-cursor-type 'box)
    (setq ryo-modal-cursor-color "Sky Blue")
    (setq-default cursor-type 'bar)
    (set-cursor-color "Sky Blue")
    (add-hook 'text-mode-hook 'ryo-modal-mode)
    (add-hook 'prog-mode-hook 'ryo-modal-mode)
    
    
    ;; Key-chord
    (use-package key-chord
      :ensure t
      :config
      (setq key-chord-two-keys-delay 0.1)
      (key-chord-mode 1))
    
    ;; expand region (for selections)
    (use-package expand-region
      :ensure t
      :config)
    
  #+end_src

* Functions
** Buffer
   #+begin_src emacs-lisp
     (defun insert-space ()
       (interactive)
       (insert " "))
     
     (defun insert-4-space ()
       (interactive)
       (insert "    "))
     
     
     ;; query-replace current symbol
     (defun replace-symbol (replace-str)
       (interactive "sDo query-replace current word with: ")
       (sp-forward-symbol)
       (let ((end (point)))
	 (sp-backward-symbol)
	 (kill-ring-save (point) end)
	 (query-replace (current-kill 0) replace-str) ))
     
     ;; Find markded region using swiper
     (defun swiper-region ()
       "Use current region if active for swiper search"
       (interactive)
       (if (use-region-p)
	   (swiper (format "%s" (buffer-substring (region-beginning) (region-end))))
	 (swiper)))
     
     ;; Replace word under cursor
     (defun replace-cur-word (replace-str)
       (interactive "sDo query-replace current word with: ")
       (forward-word)
       (let ((end (point)))
	 (backward-word)
	 (kill-ring-save (point) end)
	 (query-replace (current-kill 0) replace-str) ))
   #+end_src
** Reload init file
   #+begin_src emacs-lisp
     (defun reload-init ()
       (interactive)
       (load-file "~/.emacs.d/init.el"))
   #+end_src
* Switching modes
  #+begin_src emacs-lisp
	(key-chord-define-global "99" 'ryo-modal-mode)
	(ryo-modal-keys
	 ("9" ryo-modal-mode)
	 ("g" "C-g"))
  #+end_src
* keybindings
** Buffer movements
   #+begin_src emacs-lisp
     (ryo-modal-keys
      ("i" previous-line)
      ("k" next-line)
      ("j" backward-char)
      ("l" forward-char)
      ("u" backward-word)
      ("o" forward-word)
     
      ("s" beginning-of-line)
      ("e" end-of-line)
     
      ("L" forward-paragraph)
      ("J" backward-paragraph)
     
     
      ("I" beginning-of-buffer)
      ("K" end-of-buffer))
   #+end_src
** Buffer editing
   #+begin_src emacs-lisp
     (ryo-modal-keys
      ("-" undo)
      ("f" insert-space)
      ("4" insert-4-space)
      ("n" newline)
      ("d" delete-backward-char))
   #+end_src
** Copy/paste
      #+begin_src emacs-lisp
     (ryo-modal-keys
      ("x" "C-w")
      ("y" "M-w")
      ("v" "C-y"))
      #+end_src
** Buffer selection
   #+begin_src emacs-lisp
     (ryo-modal-key "m L" 'set-mark-command :then '(forward-paragraph) :name "mark-paragraph")
     (ryo-modal-key "m J" 'set-mark-command :then '(backward-paragraph) :name "mark-paragraph")
     (ryo-modal-key "m B" 'beginning-of-buffer :then '(set-mark-command end-of-buffer) :name "mark-whole-buffer")
     (ryo-modal-key "m j" 'set-mark-command :then '(backward-char) :name "mark-char-backward")
     (ryo-modal-key "m l" 'set-mark-command :then '(forward-char) :name "mark-char-forward")
     (ryo-modal-key "m o" 'set-mark-command :then '(forward-word) :name "mark-word")
     (ryo-modal-key "m u" 'set-mark-command :then '(backward-word) :name "mark-word-backward")
     (ryo-modal-key "m K" 'set-mark-command :then '(end-of-buffer) :name "mark-till-buffer-end")
     (ryo-modal-key "m I" 'set-mark-command :then '(beginning-of-buffer)  :name "mark-till-buffer-end")
     (ryo-modal-key "m s" 'set-mark-command :then '(beginning-of-line) :name "mark-line")
     (ryo-modal-key "m e" 'set-mark-command :then '(end-of-line) :name "mark-line")
   #+end_src
** Buffer search/replace
   #+begin_src emacs-lisp
     (ryo-modal-keys
      ("rr" query-replace)
      ("rw" replace-cur-word)
      ("rs" replace-symbol))
     (ryo-modal-keys
      ("/" swiper-region)
      ("@" highlight-symbol-at-point)
      ("2" highlight-symbol-next)
      ("*" swiper-isearch-thing-at-point)) 
   #+end_src
** Windows
   #+begin_src emacs-lisp
     (ryo-modal-key
      "w" '(("j" windmove-left)
	    ("l" windmove-right)
	    ("i" windmove-up)
	    ("k" windmove-down)
	    ("d" delete-window)
	    ("D" delete-other-windows)
	    ("v" split-window-vertically)
	    ("h" split-window-horizontally)
	    ))
   #+end_src
** On buffer operations
   #+begin_src emacs-lisp
     (ryo-modal-key
      "b" '(("b" ace-jump-buffer)
	    ("s" save-buffer)
	    ("k" kill-buffer)
	    ("S" save-some-buffers)
	    ("o" counsel-find-file)
	    ("m" counsel-bookmark)
	    ))
     (ryo-modal-keys
      ("M-j" previous-buffer)
      ("M-l" next-buffer)
      )
   #+end_src
** Tools
   #+begin_src emacs-lisp
     (ryo-modal-key
      "SPC" '(("t" treemacs)
	      ("g" magit-status)
	      ("q" save-buffers-kill-terminal)
	      ("9" reload-init)
	      ))
   #+end_src
* Treemacs
  #+begin_src emacs-lisp
    (use-package treemacs
      :bind(:map treemacs-mode-map
		 ("w" . other-window)
		 ("n" . treemacs-RET-action)
		 ("i" . treemacs-previous-line)
		 ("k" . treemacs-next-line)))
  #+end_src
