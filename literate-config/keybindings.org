* Packages
  In additon to the packages installed here, the commands also depend
  on the following packages, smartparens, ...
  #+begin_src emacs-lisp
    ;; Ryo
    (use-package ryo-modal
      :ensure t
      :commands ryo-modal-mode
      )
    (setq ryo-modal-cursor-type 'box)
    (setq ryo-modal-cursor-color "Sky Blue")
    (setq-default cursor-type 'bar)
    (set-cursor-color "Sky Blue")
    (add-hook 'text-mode-hook 'ryo-modal-mode)
    (add-hook 'prog-mode-hook 'ryo-modal-mode)
    
    
    ;; Key-chord
    (use-package key-chord
      :ensure t
      :config
      (setq key-chord-two-keys-delay 0.1)
      (key-chord-mode 1))
    
    ;; xah-fly keys
    (use-package xah-fly-keys
      :ensure t)
    
    #+end_src
* Functions
** Buffer editing
   #+begin_src emacs-lisp
     (defun insert-space ()
       (interactive)
       (insert " "))
     (defun insert-4-space ()
       (interactive)
       (insert "    "))
   #+end_src
* Switching modes
  #+begin_src emacs-lisp
    (key-chord-define-global "99" 'ryo-modal-mode)
    (ryo-modal-keys
     ("9" ryo-modal-mode))
  #+end_src
* keybindings
** Buffer movements
   #+begin_src emacs-lisp
     (ryo-modal-keys
      ("i" previous-line)
      ("k" next-line)
      ("j" backward-char)
      ("l" forward-char)
      ("u" sp-backward-symbol)
      ("o" sp-forward-symbol)
     
      ("s" beginning-of-line)
      ("e" end-of-line)
     
      ("I" beginning-of-buffer)
      ("K" end-of-buffer))
   #+end_src
** Buffer editing
   #+begin_src emacs-lisp
     (ryo-modal-keys
      ("-" undo)
      ("f" insert-space)
      ("4" insert-4-space)
      ("n" newline))
   #+end_src
** Windows
   #+begin_src emacs-lisp
     (ryo-modal-key
      "w" '(("j" windmove-left)
	    ("l" windmove-right)
	    ("i" windmove-up)
	    ("k" windmove-down)
	    ("d" delete-window)
	    ("D" delete-other-windows)
	    ("v" split-window-vertically)
	    ("h" split-window-horizontally)
	    ))
   #+end_src
** Buffers
   #+begin_src emacs-lisp
     (ryo-modal-key
      "b" '(("j" ace-jump-buffer)
	    ("b" xah-previous-user-buffer)
	    ("s" save-buffer)
	    ("k" kill-buffer)
	    ("S" save-some-buffers)
	    ("o" counsel-find-file)))
   #+end_src
** Tools
   #+begin_src emacs-lisp
     (ryo-modal-key
      "SPC" '(("t" treemacs)
	      ("g" magit-status)
	      ("q" save-buffers-kill-terminal)
	      ))
	   #+end_src
* Treemacs
  #+begin_src emacs-lisp
    (use-package treemacs
      :bind(:map treemacs-mode-map
		 ("w" . other-window)
		 ("n" . treemacs-RET-action)
		 ("i" . treemacs-previous-line)
		 ("k" . treemacs-next-line)))
  #+end_src
