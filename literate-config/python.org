* conda
    #+begin_src emacs-lisp
	   (use-package conda
	     :ensure t
	     :config
	     (custom-set-variables
	      '(conda-anaconda-home "/home/vj/anaconda3"))
	     (setq
	      conda-env-home-directory (expand-file-name "~/anaconda3/") ;; as in previous example; not required
	      conda-env-subdirectory "envs"))
    #+end_src
* anaconda-mode
  #+begin_src emacs-lisp
    (use-package anaconda-mode
      :ensure t
      )
  #+end_src
* company-anaconda
  #+begin_src emacs-lisp
    ;; Loading company anaconda
    (use-package company-anaconda
      :ensure t)
    (eval-after-load "company"
      '(add-to-list 'company-backends '(company-anaconda :with company-capf)))

    ;; Using popups instead of minibuffer to show syntax errors
    (defun my-annotation-function (candidate)
      (let ((description (get-text-property 0 'description candidate)))
	(when description
	  (concat "<" (substring description 0 1) ">"))))
    (setq company-anaconda-annotation-function 'my-annotation-function)
  #+end_src
* Python mode hooks
  #+begin_src emacs-lisp
	(add-hook 'python-mode-hook 'company-mode)
	    (add-hook 'python-mode-hook 'anaconda-mode)             ;; anaconda
	    (add-hook 'python-mode-hook 'anaconda-eldoc-mode)       ;; anaconda-eldoc-mode
    (eval-after-load "company"
     '(add-to-list 'company-backends 'company-anaconda))
  #+end_src
