Adding repositories and install ~use-package~ if not
already installed.
#+BEGIN_SRC emacs-lisp
  ;; Information
  (setq user-mail-address "venkatesh.jatla@gmail.com")

  ;; Whick-key
  (use-package which-key
    :ensure t
    :config
    (which-key-mode))
#+END_SRC
* Base settings
  These settings does not require external packages.
  + Inhibiting not so useful GUI elements
    #+begin_src emacs-lisp
      (setq inhibit-startup-screen t)
      (tool-bar-mode -1)
      (menu-bar-mode -1)
      (scroll-bar-mode -1)
    #+end_src
  + Use visual bell instead of audio.
    #+begin_src emacs-lisp
      (setq visible-bell 1)
    #+end_src
  + Keep temporary files in one directory
    #+begin_src emacs-lisp
      (setq backup-directory-alist
	    `((".*" . ,temporary-file-directory)))
      (setq auto-save-file-name-transforms
	    `((".*" ,temporary-file-directory t)))
    #+end_src
  + Load files when they are changed on disk
    #+begin_src emacs-lisp
      (global-auto-revert-mode t)
    #+end_src
** Whitespace
   Delete trailing whitespaces on save.
   #+begin_src emacs-lisp
     (setq show-trailing-whitespace t)
   #+end_src
* Look and feel
** Feel
   + Smooth scrolling
     #+begin_src emacs-lisp
       (use-package smooth-scrolling
	 :ensure t
	 :config
	 (require 'smooth-scrolling)
	 (smooth-scrolling-mode 1))
     #+end_src
   + Better garbage collection
     #+begin_src emacs-lisp
       (use-package gcmh
	 :ensure t
	 :config
	 (gcmh-mode 1))
     #+end_src
** Look
   + Themes
     #+BEGIN_SRC emacs-lisp
       (use-package solarized-theme
	 :ensure t)
       (use-package doom-themes
	 :ensure t)
       (use-package dracula-theme
	 :ensure t)
       (use-package gruvbox-theme
	 :ensure t)
       (use-package color-theme-sanityinc-tomorrow
	 :ensure t)
       (use-package moe-theme
	 :ensure t)
       (use-package monokai-pro-theme
	 :ensure t)
       (use-package sublime-themes
	 :ensure t)
       (use-package jazz-theme
	 :ensure t)
       (use-package material-theme
	 :ensure t)
       (use-package kaolin-themes
	 :ensure t)
       (use-package apropospriate-theme
	 :ensure t)
     #+END_SRC
   + Startup screen
     #+BEGIN_SRC emacs-lisp
       (use-package dashboard
	 :ensure t
	 :config
	 (dashboard-setup-startup-hook)
	 (setq dashboard-set-heading-icons t)
	 (setq dashboard-set-file-icons t)
	 (setq dashboard-items '(
				 (projects . 5)
				 (recents  . 5)
				 (bookmarks . 5)
				 (registers . 5)))
	 (define-key dashboard-mode-map (kbd "w") 'other-window)
	 )
     #+END_SRC
   + All the icons
     #+begin_src emacs-lisp
       (use-package all-the-icons
	 :ensure t)
     #+end_src
   + Line numbers
     #+begin_src emacs-lisp
       (global-display-line-numbers-mode t)
       (setq display-line-numbers "%4d \u2502 ")
     #+end_src
* markdown
  #+begin_src emacs-lisp
    (use-package markdown-toc
      :ensure t)
    (use-package markdown-mode
      :ensure t
      :commands (markdown-mode gfm-mode)
      :mode (("README\\.md\\'" . gfm-mode)
	     ("\\.md\\'" . markdown-mode)
	     ("\\.markdown\\'" . markdown-mode))
      :init (setq markdown-command "multimarkdown"))
  #+end_src
* Productivity tools
** Paranthesis
   #+begin_src emacs-lisp
     (use-package smartparens
       :ensure t)
(show-paren-mode t)
   #+end_src
** buffer
   #+begin_src emacs-lisp
     (use-package ace-jump-buffer
       :ensure t)
   #+end_src
** Multi variable edit
   #+begin_src emacs-lisp
     (use-package iedit
       :ensure t)
   #+end_src
** org
   + Make org mode look good
     #+begin_src emacs-lisp
	    (use-package org-bullets
	      :ensure t
	      :config
	      (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
     #+end_src
   + Org agenda
     #+begin_src emacs-lisp
       (setq org-todo-keywords '((sequence "TODO(t)" "|" "IN-PROGRESS(p)" "WAITING(w)"  "|" "CANCELLED(c)" "DONE(d)")))
       (setq org-agenda-include-diary t)
       (use-package org-agenda-property
	 :ensure t)
     #+end_src
   + Presentation
     #+begin_src emacs-lisp
       (use-package ox-reveal
	 :ensure t)
       ;; Reveal.js + Org mode
       (require 'ox-reveal)
       (setq Org-Reveal-root "file://~/.emacs.d/reveal.js")
       (setq Org-Reveal-title-slide nil)
     #+end_src
   + Calfw
     #+begin_src emacs-lisp
       (use-package calfw
	 :ensure t
	 :config
	 (require 'calfw))
(use-package calfw-org
	 :ensure t
	 :config
	 (require 'calfw-org))
     #+end_src
** Completion framework
   + Code completion
     #+begin_src emacs-lisp
       (use-package company
	 :ensure t)
     #+end_src
   + Minibuffer completion
     #+begin_src emacs-lisp
	    (use-package smex
	      :ensure t
	      :config
	      (smex-initialize))
	    (use-package ivy
	      :ensure t
	      :config
	      (ivy-mode 1)
	      (global-set-key (kbd "<f1> f") 'counsel-describe-function)
	      (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
	      (global-set-key (kbd "<f1> o") 'counsel-describe-symbol)
	      (global-set-key (kbd "<f1> l") 'counsel-find-library)
	      (global-set-key "\C-s" 'swiper)
	      (global-set-key (kbd "C-x C-f") 'counsel-find-file)
	      )

	    (use-package counsel-projectile
	      :ensure t)
     #+end_src
** Syntax checking framework
   #+begin_src emacs-lisp
     (use-package flycheck
       :ensure t)
     (use-package flycheck-pos-tip
       :ensure t)
     (use-package flycheck-popup-tip
       :ensure t
       :config
       (eval-after-load 'flycheck
	 (if (display-graphic-p)
	     (flycheck-pos-tip-mode)
	   (flycheck-popup-tip-mode)))
       )
   #+end_src
** Project management
   + Projectile
     #+begin_src emacs-lisp
       (use-package projectile
	 :ensure t
	 :config
	 (projectile-mode +1)
	 (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map))
     #+end_src
   + Treemacs
     #+begin_src emacs-lisp
       (use-package treemacs
	 :ensure t
	 :defer t)
     #+end_src

** Version control
   + magit
     #+begin_src emacs-lisp
       (use-package magit
	 :ensure t)
     #+end_src
   + git-gutter
     #+begin_src emacs-lisp
       (use-package git-gutter
	 :ensure t
	 :config
	 (global-git-gutter-mode +1))
     #+end_src
** Dired
   #+begin_src emacs-lisp
     (use-package direx
       :ensure t)
   #+end_src

** Coding stats
   + Waka time
     #+begin_src emacs-lisp
	   (use-package wakatime-mode
	     :ensure t
	     :config
	     (global-wakatime-mode)
	     )
	   (custom-set-variables '(wakatime-api-key "948f1aa9-1e61-46dc-8e1f-eed41c05f2fa"))
     #+end_src
** Highlight symbol
   #+begin_src emacs-lisp
     (use-package highlight-symbol
       :ensure t)
   #+end_src
** Search/Find
   #+begin_src emacs-lisp
     (use-package swiper
       :ensure t
       :defer t)
     (use-package counsel
       :ensure t
       :ensure t)
   #+end_src
** Windows
   #+begin_src emacs-lisp
     (use-package ace-window
       :ensure t)
   #+end_src
** Recent files
   #+begin_src emacs-lisp
     (recentf-mode 1)
     (setq recentf-max-menu-items 25)
     (setq recentf-max-saved-items 25)
   #+end_src
