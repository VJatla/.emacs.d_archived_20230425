Adding repositories and install ~use-package~ if not
already installed.
#+BEGIN_SRC emacs-lisp
  ;; Information
  (setq user-mail-address "venkatesh.jatla@gmail.com")

  ;; Whick-key
  (use-package which-key
    :ensure t
    :config
    (which-key-mode))
#+END_SRC
* Base settings
These settings does not require external packages.
+ Inhibiting not so useful GUI elements
  #+begin_src emacs-lisp
    (setq inhibit-startup-screen t)
    (tool-bar-mode -1)
    (menu-bar-mode -1)
    (scroll-bar-mode -1)
  #+end_src
+ Use visual bell instead of audio.
  #+begin_src emacs-lisp
    (setq visible-bell 1)
  #+end_src
+ Keep temporary files in one directory
  #+begin_src emacs-lisp
    (setq backup-directory-alist
	  `((".*" . ,temporary-file-directory)))
    (setq auto-save-file-name-transforms
	  `((".*" ,temporary-file-directory t)))
  #+end_src
+ Load files when they are changed on disk
  #+begin_src emacs-lisp
    (global-auto-revert-mode t)
  #+end_src
** Whitespace
Delete trailing whitespaces on save.
#+begin_src emacs-lisp
  (setq show-trailing-whitespace t)
#+end_src
* Look and feel
** Feel
+ Smooth scrolling
  #+begin_src emacs-lisp
    (use-package smooth-scrolling
      :ensure t
      :config
      (require 'smooth-scrolling)
      (smooth-scrolling-mode 1))
  #+end_src
+ Better garbage collection
  #+begin_src emacs-lisp
    (use-package gcmh
      :ensure t
      :config
      (gcmh-mode 1))
  #+end_src
** Look
+ Themes
  ,#+BEGIN_SRC emacs-lisp
  (use-package zenburn-theme
  :ensure t)
  #+END_SRC
  + Startup screen
    #+BEGIN_SRC emacs-lisp
      (use-package dashboard
	:ensure t
	:config
	(dashboard-setup-startup-hook)
	(setq dashboard-set-heading-icons t)
	(setq dashboard-set-file-icons t)
	(setq dashboard-items '(
				(projects . 5)
				(recents  . 5)
				(bookmarks . 5)
				(registers . 5)))
	(define-key dashboard-mode-map (kbd "w") 'other-window)
	;; (setq dashboard-footer-messages '("कर्मण्येवाधिकारस्ते मा फलेषु कदाचन। मा कर्मफलहेतुर्भूर्मा ते सङ्गोऽस्त्वकर्मणि।।"))
	)
    #+END_SRC
  + All the icons
    #+begin_src emacs-lisp
      (use-package all-the-icons
	:ensure t)
    #+end_src
  + Line numbers
    #+begin_src emacs-lisp
      (global-display-line-numbers-mode t)
      (setq display-line-numbers "%4d \u2502 ")
    #+end_src
  + Window title to to major mode + buffer name
    #+begin_src emacs-lisp
      (setq-default frame-title-format '("%b [%m]"))
    #+end_src
  + Trun off wrap lines
    #+begin_src emacs-lisp
      (setq-default truncate-lines 1)
    #+end_src
*** fci-mode
#+begin_src emacs-lisp
  (use-package fill-column-indicator
    :ensure t
    :config
    (setq fci-rule-use-dashes t)
    (setq fci-rule-width 1))
  '(fci-rule-color "white")
#+end_src

* markdown
#+begin_src emacs-lisp
  (use-package markdown-toc
    :ensure t)
  (use-package markdown-mode
    :ensure t
    :commands (markdown-mode gfm-mode)
    :mode (("README\\.md\\'" . gfm-mode)
	   ("\\.md\\'" . markdown-mode)
	   ("\\.markdown\\'" . markdown-mode))
    :init (setq markdown-command "multimarkdown"))
#+end_src
* Productivity tools
** Terminal
#+begin_src emacs-lisp
  (defun open-terminal-in-workdir ()
    (interactive)
    (call-process-shell-command
     (concat "konsole --workdir " default-directory) nil 0))

  (global-set-key (kbd "C-c t") 'open-terminal-in-workdir)
#+end_src
** Paranthesis
#+begin_src emacs-lisp
  (use-package smartparens
    :ensure t)
  (show-paren-mode t)
#+end_src
** buffer
#+begin_src emacs-lisp
  (use-package ace-jump-buffer
    :ensure t)
#+end_src
** Multi variable edit
#+begin_src emacs-lisp
  (use-package iedit
    :ensure t)
#+end_src
** Completion framework
+ Code completion
  #+begin_src emacs-lisp
      (use-package company
	:ensure t
	:config
	(add-hook 'after-init-hook 'global-company-mode))
  #+end_src
+ Minibuffer completion
  #+begin_src emacs-lisp
    (use-package smex
      :ensure t
      :config
      (smex-initialize))
    (use-package ivy-avy
      :ensure t)
    (use-package ivy
      :ensure t
      :config
      (ivy-mode 1)
      (global-set-key (kbd "<f1> f") 'counsel-describe-function)
      (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
      (global-set-key (kbd "<f1> o") 'counsel-describe-symbol)
      (global-set-key (kbd "<f1> l") 'counsel-find-library)
      (global-set-key "\C-s" 'swiper)
      (global-set-key (kbd "C-x C-f") 'counsel-find-file)
      )

    (use-package counsel-projectile
      :ensure t)
  #+end_src
** Syntax checking framework
#+begin_src emacs-lisp
  (use-package flycheck
    :ensure t)
  (use-package flycheck-pos-tip
    :ensure t)
  (use-package flycheck-popup-tip
    :ensure t
    :config
    (eval-after-load 'flycheck
      (if (display-graphic-p)
	  (flycheck-pos-tip-mode)
	(flycheck-popup-tip-mode)))
    )
#+end_src
** Project management
+ Projectile
  #+begin_src emacs-lisp
    (use-package projectile
      :ensure t
      :config
      (projectile-mode +1)
      (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map))
  #+end_src
+ Treemacs
  #+begin_src emacs-lisp
    (use-package treemacs
      :ensure t
      :defer t)
  #+end_src

** Version control
+ magit
  #+begin_src emacs-lisp
    (use-package magit
      :ensure t)
  #+end_src
+ git-gutter
  #+begin_src emacs-lisp
    (use-package git-gutter
      :ensure t
      :config
      (global-git-gutter-mode +1))
  #+end_src
** Dired
#+begin_src emacs-lisp
  (use-package direx
    :ensure t)
#+end_src

** Coding stats
+ Waka time
  #+begin_src emacs-lisp
    (use-package wakatime-mode
      :ensure t
      :config
      (global-wakatime-mode)
      )
    (custom-set-variables '(wakatime-api-key "948f1aa9-1e61-46dc-8e1f-eed41c05f2fa"))
  #+end_src
** Highlight symbol
#+begin_src emacs-lisp
  (use-package highlight-symbol
    :ensure t
    )
  (add-hook 'prog-mode-hook 'highlight-symbol-mode)
#+end_src
** Search/Find
#+begin_src emacs-lisp
  (use-package swiper
    :ensure t
    :defer t)
  (use-package counsel
    :ensure t
    :ensure t)
#+end_src
** Windows
#+begin_src emacs-lisp
  (use-package ace-window
    :ensure t)
#+end_src
** Recent files
#+begin_src emacs-lisp
  (recentf-mode 1)
  (setq recentf-max-menu-items 25)
  (setq recentf-max-saved-items 25)
#+end_src
** Vterm
#+begin_src emacs-lisp
  (use-package vterm
    :ensure t
    :bind(:map vterm-mode-map
	       ("<f9>" . vterm-toggle)))
  (use-package vterm-toggle
    :ensure t)
  :config
  (setq vterm-toggle-fullscreen-p nil)
  (add-to-list 'display-buffer-alist
	       '((lambda(bufname _) (with-current-buffer bufname (equal major-mode 'vterm-mode)))
		 (display-buffer-reuse-window display-buffer-at-bottom)
		 ;;(display-buffer-reuse-window display-buffer-in-direction)
		 ;;display-buffer-in-direction/direction/dedicated is added in emacs27
		 ;;(direction . bottom)
		 ;;(dedicated . t) ;dedicated is supported in emacs27
		 (reusable-frames . visible)
		 (window-height . 0.2)))
  (global-set-key (kbd "<f9>") #'vterm-toggle)

   #+end_src
** Yasnippet
   #+begin_src emacs-lisp
     (use-package yasnippet
       :ensure t)
     (require 'yasnippet)
     (yas-global-mode 1)
     (use-package yasnippet-snippets
       :ensure t)
   #+end_src
* Mermaid mode
#+begin_src emacs-lisp
  (use-package mermaid-mode
    :ensure t)
  (add-to-list 'auto-mode-alist '("\\.mmd\\'" . mermaid-mode))
#+end_src
