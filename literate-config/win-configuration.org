Adding repositories and install ~use-package~ if not
already installed.
#+BEGIN_SRC emacs-lisp
;; Information  
(setq user-mail-address "venkatesh.jatla@gmail.com")

;; Package repositories 
(setq package-archives
      '(
	("gnu" . "https://elpa.gnu.org/packages/")
	("melpa" . "https://melpa.org/packages/")
	)
      )

;; Activating use-package (Installing if not found)
(require 'package)
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

;; Emacs modal editing
(use-package xah-fly-keys
  :ensure t
  :config
  (xah-fly-keys-set-layout "qwerty")
  )
(xah-fly-keys 1)

;; Whick-key
(use-package which-key
  :ensure t)
(which-key-mode)
#+END_SRC
* Base settings
  These settings does not require external packages.
  + Inhibiting not so useful GUI elements
    #+begin_src emacs-lisp
    (setq inhibit-startup-screen t)
    (tool-bar-mode -1)
    (menu-bar-mode -1)
    (scroll-bar-mode -1)
    #+end_src
  + Use visual bell instead of audio.
    #+begin_src emacs-lisp
    (setq visible-bell 1)    
    #+end_src
  + Font
    #+BEGIN_SRC emacs-lisp
    (set-face-attribute 'default nil :family "Consolas" :height 150)
    #+END_SRC
* Look and feel
** Feel
+ Smooth scrolling
  #+BEGIN_SRC emacs-lisp
  (use-package smooth-scrolling
  :ensure t
  :config
  (smooth-scrolling-mode 1)
  )
  #+END_SRC
** Look
+ Theme
  #+BEGIN_SRC emacs-lisp
  (use-package color-theme-sanityinc-tomorrow
  :ensure t
  :config
  (load-theme 'sanityinc-tomorrow-day t)
  )
  #+END_SRC
+ Startup screen
  #+BEGIN_SRC emacs-lisp
  (use-package dashboard
  :ensure t
  :config
 (dashboard-setup-startup-hook)
 (setq dashboard-set-heading-icons t)
 (setq dashboard-set-file-icons t)
 (setq dashboard-items '(
 (agenda . 5)
 (projects . 5)
 (recents  . 5)
 (bookmarks . 5)
 (registers . 5))))
  #+END_SRC
+ All the icons
  #+begin_src emacs-lisp
  (use-package all-the-icons
  :ensure t)
  #+end_src
+ Powerline
  #+begin_src emacs-lisp
  (use-package powerline
  :ensure t
  :config
  (powerline-default-theme))
  #+end_src
  
* Productivity tools
** Completion framework
   + Code completion
     #+begin_src emacs-lisp
     (use-package company
     :ensure t
     :config
     (add-hook 'after-init-hook 'global-company-mode))
     #+end_src
   + Minibuffer completion
     #+begin_src emacs-lisp
     (use-package flx
     :ensure t
     :defer t)
     (use-package flx-ido
     :ensure t
     :defer t
     :config 
     (ido-mode 1)
     (ido-everywhere 1)
     (flx-ido-mode 1)
     (setq ido-enable-flex-matching t)
     (setq ido-use-faces nil)
     (setq ido-use-virtual-buffers t))
     (use-package smex
     :ensure t
     :config
     (smex-initialize))
     #+end_src
** Project management
   + Projectile
     #+begin_src emacs-lisp
     (use-package projectile
     :ensure t
     :config
     (projectile-mode +1)
     (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map))
     #+end_src
   + Treemacs
     #+begin_src emacs-lisp
     (use-package treemacs
     :ensure t
     :defer t
     )
     #+end_src
   
** Version control
   + magit
     #+begin_src emacs-lisp
     (use-package magit
     :ensure t)
     #+end_src
   + git-gutter-fringe
     #+begin_src emacs-lisp
     (use-package git-gutter
     :ensure t
     :config
     (add-hook 'prog-mode-hook 'git-gutter-mode)
     (add-hook 'text-mode-hook 'git-gutter-mode))
     #+end_src
** System related
   #+begin_src emacs-lisp
   (use-package direx
   :ensure t
   :defer t)
   (use-package neotree
   :ensure t
   :defer t)
   #+end_src
   
* Programming languages
** Markdown mode
   #+begin_src emacs-lisp
   (use-package markdown-mode
   :ensure t
   :commands (markdown-mode gfm-mode)
   :mode (("README\\.md\\'" . gfm-mode)
   ("\\.md\\'" . markdown-mode)
   ("\\.markdown\\'" . markdown-mode))
  :init 
  (setq markdown-command "multimarkdown"))
   #+end_src
