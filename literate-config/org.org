*  Looks
     #+begin_src emacs-lisp
       (use-package org-bullets
	 :ensure t
	 :config
	 (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
       
       ;; Display previous level headings for a task
       (setq org-agenda-prefix-format '((agenda . " %i %-12:c%?-12t% s")
					(timeline . "  % s")
					(todo .
					      " %i %-12:c %(concat \"[ \"(org-format-outline-path (org-get-outline-path)) \" ]\") ")
					(tags .
					      " %i %-12:c %(concat \"[ \"(org-format-outline-path (org-get-outline-path)) \" ]\") ")
					(search . " %i %-12:c"))
	     )
     #+end_src
* Agenda
       #+begin_src emacs-lisp
	 (setq org-agenda-clockreport-parameter-plist
	       (quote (:link t :maxlevel 5 :fileskip0 t :compact t :narrow 80)))
	 (setq org-agenda-tags-column 77)
	 (setq org-todo-keywords '((sequence "TODO(t)" "DOING(o)" "PAUSED(p)" "WAITING(w)" "FEEDBACK(f)" "|" "DONE(d)" "CANCELLED(c)" "ARCHIVED(a)")))
	 (setq org-agenda-include-diary nil)
	 (setq org-agenda-span 1)
	 (use-package org-agenda-property
	   :ensure t)

	 (setq org-todo-keyword-faces
	       ;; Inspired from Gruvbox dark theme
	       '(
		 ("TODO" . (:foreground "#CC241D" :background "#282828" :weight bold :box t))
		 ("DOING" . (:foreground "#ff5733" :background "#282828" :weight bold :box t))
		 ("PAUSED" . (:foreground "#D79921" :background "#282828" :weight bold :box t))
		 ("WAITING" . (:foreground "#D79921" :background "#282828" :weight bold :box t))
		 ("FEEDBACK" . (:foreground "#D79921" :background "#282828" :weight bold :box t))
		 ("DONE" . (:foreground "#689D6A" :background "#282828" :weight bold  :box t :strike-through t))
		 ("CANCELLED" . (:foreground "#689D6A" :background "#282828" :weight bold  :box t :strike-through t))
		 ("ARCHIVED" . (:foreground "#689D6A" :background "#282828" :weight bold  :box t :strike-through t))
		 ))


	 (setq org-fontify-done-headline t)
	 (custom-set-faces
	  '(org-headline-done 
	    ((((class color) (min-colors 16) (background dark)) 
	      (:strike-through t)))))
       #+end_src
** Agenda timeline
#+begin_src emacs-lisp
  (use-package org-timeline
  :ensure t
  :config
  (add-hook 'org-agenda-finalize-hook 'org-timeline-insert-timeline :append)
  )
#+end_src
* Presentation
	 #+begin_src emacs-lisp
	   (use-package ox-reveal
	     :ensure t)
	   ;; Reveal.js + Org mode
	   (require 'ox-reveal)
	   (setq Org-Reveal-root "file://~/.emacs.d/reveal.js")
	   (setq Org-Reveal-title-slide nil)
	 #+end_src
* Org time format
  #+begin_src emacs-lisp
    (setq format-time-string "%b %d, %Y")
  #+end_src
* Keybindings
#+begin_src emacs-lisp
  (ryo-modal-major-mode-keys
   'org-mode

   ("n" org-return)
   ("M-n" org-meta-return)
   ("SPC s" org-todo)
   ("SPC c i" org-clock-in)
   ("SPC c o" org-clock-out)

   )
#+end_src
