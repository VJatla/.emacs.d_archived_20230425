* Notes
For this to work we first need to
1. Install RTags
2. The first time you run irony we need to install irony server, =M-x irony-install-server=
* Installation
** rtags
Build and install RTags.
#+begin_src emacs-lisp
  (use-package rtags
    :ensure t)
#+end_src
** company-rtags
#+begin_src emacs-lisp
  (use-package company-rtags
    :ensure t)
#+end_src
** ivy-rtags
#+begin_src emacs-lisp
  (use-package ivy-rtags
    :ensure t)
#+end_src
** Irony
Source code completion
#+begin_src emacs-lisp
  (use-package irony
    :ensure t)
#+end_src
** Company-irony
#+begin_src emacs-lisp
  (use-package company-irony
    :ensure t)
#+end_src
** Company irony c headers
#+begin_src emacs-lisp
  (use-package company-irony-c-headers
    :ensure t)
#+end_src
** Flycheck Rtags
#+begin_src emacs-lisp
  (use-package flycheck-rtags
    :ensure t)
#+end_src
** Flycheck with Irony
#+begin_src emacs-lisp
  (use-package flycheck-irony
    :ensure t)
#+end_src
** CMAKE IDE
#+begin_src emacs-lisp
  (use-package cmake-ide
    :ensure t)
#+end_src
* Configuration
** Rtags
#+begin_src emacs-lisp
  (rtags-enable-standard-keybindings)
#+end_src
** Company with rtags
#+begin_src emacs-lisp
  (require 'rtags)

  (require 'company-rtags)
  (setq rtags-completions-enabled t)
#+end_src
** Irony
The first time you run irony we need to install irony server, =M-x irony-install-server=
#+begin_src emacs-lisp
  (add-hook 'c++-mode-hook 'irony-mode)
  (add-hook 'c-mode-hook 'irony-mode)
  (add-hook 'objc-mode-hook 'irony-mode)

  (defun my-irony-mode-hook ()
    (define-key irony-mode-map [remap completion-at-point]
      'irony-completion-at-point-async)
    (define-key irony-mode-map [remap complete-symbol]
      'irony-completion-at-point-async))

  (add-hook 'irony-mode-hook 'my-irony-mode-hook)
  (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)
#+end_src
** Company with irony and irony-c-headers
#+begin_src emacs-lisp
  (add-hook 'irony-mode-hook 'company-irony-setup-begin-commands)
  (setq company-backends (delete 'company-semantic company-backends))
  (require 'company-irony-c-headers)
  (eval-after-load 'company
    '(add-to-list
      'company-backends '(company-irony-c-headers company-irony)))

  ;; Tab completion
  (setq company-idle-delay 0)
  (define-key c-mode-map [(tab)] 'company-complete)
  (define-key c++-mode-map [(tab)] 'company-complete)

#+end_src
** Rtags with Flycheck mode
#+begin_src emacs-lisp
  (add-hook 'c++-mode-hook 'flycheck-mode)
  (add-hook 'c-mode-hook 'flycheck-mode)

  (require 'flycheck-rtags)

  (defun my-flycheck-rtags-setup ()
    (flycheck-select-checker 'rtags)
    (setq-local flycheck-highlighting-mode nil) ;; RTags creates more accurate overlays.
    (setq-local flycheck-check-syntax-automatically nil))
  ;; c-mode-common-hook is also called by c++-mode
  (add-hook 'c-mode-common-hook #'my-flycheck-rtags-setup)
#+end_src
** Flycheck with Irony
#+begin_src emacs-lisp
  (eval-after-load 'flycheck
  '(add-hook 'flycheck-mode-hook #'flycheck-irony-setup))
#+end_src
** CMAKE IDE
#+begin_src emacs-lisp
  (cmake-ide-setup)
#+end_src
